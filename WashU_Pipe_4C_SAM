#!/usr/bin/perl

###################################################################################
###################################################################################
##This file is Copyright (C) 2015, Steven Wingett (steven.wingett@babraham.ac.uk)##
##                                                                               ##
##                                                                               ##
##This file is part of WashU_Pipe.                                               ##
##                                                                               ##
##WashU_Pipe is free software: you can redistribute it and/or modify             ##
##it under the terms of the GNU General Public License as published by           ##
##the Free Software Foundation, either version 3 of the License, or              ##
##(at your option) any later version.                                            ##
##                                                                               ##
##WashU_Pipe is distributed in the hope that it will be useful,                  ##
##but WITHOUT ANY WARRANTY; without even the implied warranty of                 ##
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                  ##
##GNU General Public License for more details.                                   ##
##                                                                               ##
##You should have received a copy of the GNU General Public License              ##
##along with WashU_Pipe.  If not, see <http://www.gnu.org/licenses/>.            ##
###################################################################################
###################################################################################

use strict;
use warnings;
use Getopt::Long;
use FindBin '$Bin';
use lib $Bin;
use WashU_Pipe_Module;

use Data::Dumper;



#######################################################################
#Get and check user input

#Option variables
my $capture_file;    #Stores baits positions
my $columns;
my $combine;
my $filelist;
my %filehandler;
my $help;
my $minimum = 0;
my $maximum = 0;
my $version;
my $config_result = GetOptions( 
	"capture=s" => \$capture_file,
	"columns=s" => \$columns,
	"combine" => \$combine,
	"filelist=s" => \$filelist,
    "help" => \$help,
	"maximum=i" => \$maximum,
    "minimum=i" => \$minimum,
	"version" => \$version
);

die "Could not parse options" unless ($config_result);

if ($help) {
    print while (<DATA>);
    exit(0);
}

if($version){
	$version = get_version();
	print "WashU_Pipe v$version\n";
	exit(0);
}

$minimum = abs($minimum);    #In case user specified a negative value
$maximum = abs($maximum); 

if($maximum and $minimum){
	unless($maximum > $minimum){
		die "--maximum $maximum needs to be greater than --minimum $minimum\n";
	}
}

if(defined $columns){
	unless($columns =~ /^\d+,\d+,\d+,\d+$/){
		die "The --columns parameter needs to be a list of four comma-separated integers e.g. 2,4,5,6\n"; 
	}
}else{
	$columns = '1,2,3,4';
}	

my @files;
push(@files, getFilenames($filelist)) if defined $filelist;
push (@files, @ARGV) if @ARGV;
@files = deduplicate_array(@files);

unless ( @files and $capture_file ) {
    warn "Please specify a capture positions file (--capture -c) and at least 1 HiCUP output file\n";
    print while (<DATA>);
    exit (0);
}


#########################################################################################
#Determine the bait positions
print "Reading capture file '$capture_file'\n";

#Input capture positions - allow for same ids with multiple positions and mutiple positions with same ids
my %pos_id;    #Hash of arrays %baits{csome\tstart\end}->@(ids)
my $ids_ok = 1;
my %id_pos;    #Hash of arrays %baits{id}->@(csomes\tstarts\tends)

my ($csome_col, $start_col, $end_col, $id_col) = split(/,/, $columns);    #Determine what each column contains
open( CAPTURE_REGIONS, '<', $capture_file ) or die "Could not open '$capture_file' : $!";
while (<CAPTURE_REGIONS>) {
	my $line = $_;
    chomp $line;
	next if $line =~ /^\s*$/;    #Ignore empty lines
	
	my $csome = (split(/\t/, $line))[$csome_col - 1];
    my $start = (split(/\t/, $line))[$start_col - 1];
	my $end = (split(/\t/, $line))[$end_col - 1];
	my $id = (split(/\t/, $line))[$id_col - 1];
	
	if($combine){		
		push( @{ $pos_id{"$csome\t$start\t$end"} }, 'Combined' );
		push( @{ $id_pos{Combined} }, "$csome\t$start\t$end" );
	}else{
        $id = seqmonk_reformatter($id);
            unless ($id =~ /^[\w\.\-\|]+$/){
            warn "'$id' contains non-alphanumeric characters (underscores are also ok)\n"; 
            $ids_ok = 0;
        }
		push( @{ $pos_id{"$csome\t$start\t$end"} }, $id );
		push( @{ $id_pos{$id} }, "$csome\t$start\t$end" );
	}
}

close CAPTURE_REGIONS or die "Could not close $capture_file : $!";
die "Edit the 4C probes file '$capture_file' accordingly\n" unless($ids_ok);



########################################################################################
#Process the HiCUP BAM/SAM files sequentially
foreach my $interactions_file (@files) {

    print "Processing $interactions_file\n";

    #Open input file
    if ( $interactions_file =~ /\.bam$/ ) {
        open( IN, "samtools view -h $interactions_file |" ) or die "Could not read '$interactions_file' : $!";
    } else {
        open( IN, '<', $interactions_file ) or die "Could not open '$interactions_file' : $!";
    }

    #Open output filehandles
    my %filehandler;
    foreach my $id ( keys %id_pos ) {
        $filehandler{$id} = newbamopen( "$interactions_file.$id.otherends.bam" );
    }

    #Read input file
    while (<IN>) {
        chomp;
        my $line = $_;
        if ( substr( $_, 0, 1 ) eq '@' ) {    #Header line, print to all output files
            foreach my $id ( keys %id_pos ) {
                my $fh = $filehandler{$id};
                print $fh "$line\n";
            }
            next;
        }
		
        my $readF = $_;
        my $readR = scalar <IN>;
        chomp $readF;
        chomp $readR;

        my $csomeF = ( split( /\t/, $readF ) )[2];
        my $csomeR = ( split( /\t/, $readR ) )[2];

        #Start and End refer to genomic mapping only and take no account of strand (i.e. has Bowtie reports mapped reads)
        my $startF = ( split( /\t/, $readF ) )[3];
        my $startR = ( split( /\t/, $readR ) )[3];
        my $seqF   = ( split( /\t/, $readF ) )[9];
        my $seqR   = ( split( /\t/, $readR ) )[9];
        my $endF   = $startF + length($seqF) - 1;
        my $endR   = $startR + length($seqR) - 1;
 
        if($minimum or $maximum){    #Only include di-tags separated by a minimum distance
            next if($csomeF ne $csomeR);    #Trans di-tag
			
			my $distance;
			if($endF > $endR){    #Reverse read first    
				$distance = $startF - $endR - 1;
            }else{    #Forward read first
				$distance = $startR - $endF - 1;
            }
            next if($distance < $minimum);
			next if( ($distance > $maximum) and $maximum );   #Check $maximum set by user (i.e is not default: 0)
        }
		
        my @captured_idsF = which_is_captured( $csomeF, $startF, $endF );
        my @captured_idsR = which_is_captured( $csomeR, $startR, $endR );
        my @captured_idsFR = ( @captured_idsF, @captured_idsR );

        if ( scalar( @captured_idsFR < 1 ) ) {    #Nothing captured
            next;		
        }

        #De-duplicate
        my %unique_ids;
        foreach my $id (@captured_idsFR) {
            $unique_ids{$id} = '';
        }

        #Print to the relevant file
        foreach my $id ( keys %unique_ids ) {
            my $fh = $filehandler{$id};
            print $fh "$readF\n$readR\n";
        }
    }
    close IN or die "Could not close input file $interactions_file : $!";
}

print "'Virtual 4C' complete\n";

exit (0);



#####################################################################################
#Subroutines
#####################################################################################

######################
#Subroutine "newnbamopen":
#links a file to a filehandle
sub newbamopen {
    my $path = shift;
    my $fh;

    open( $fh, "| samtools view -bSh 2>/dev/null - > $path" ) or die "\nCould not create filehandle to $path in subroutine \'newopen\'\n";
    return $fh;
}


######################
#Subroutine "which_is_captured":
#Receives a location and returns
#the id with which that region is
#associated
sub which_is_captured {    #Subroutine determines whether a read is in a capture region
    my ( $csome, $start, $end ) = @_;
    my @captured_ids;

    foreach my $capture_position ( keys %pos_id ) {
        
        my ( $capture_csome, $capture_start, $capture_end ) = split( /\t/, $capture_position );      
        if ( $capture_csome ne $csome ) {    #Ignore if not on same csome
            next;
        }

        if ( ( $end >= $capture_start ) and ( $end <= $capture_end ) ) {    #Check for whether is captured
            push( @captured_ids, @{ $pos_id{$capture_position} } );
        } elsif ( ( $start >= $capture_start ) and ( $start <= $capture_end ) ) {
            push( @captured_ids,  @{ $pos_id{$capture_position} }  );
        } elsif ( ( $start >= $capture_start ) and ( $end <= $capture_end ) ) {
            push( @captured_ids,  @{ $pos_id{$capture_position} }  );
        }
    }

    my %unique_ids;
    foreach my $id (@captured_ids) {
        $unique_ids{$id} = '';
    }

    my @captured_ids_array = keys(%unique_ids);
    return @captured_ids_array;
}



__DATA__

WashU_Pipe_4C_SAM

SYNOPSIS

To identify captured Hi-C di-tags

FUNCTION

WashU_Pipe_4C_SAM --capture [Capture File] [Options] [BAM/SAM Files]
WashU_Pipe_4C_SAM --capture [Capture File] --filelist [File listing BAM/SAM files] [Options]
WashU_Pipe_4C_SAM --capture [Capture File] --filelist [File listing BAM/SAM files] [Options] [BAM/SAM Files]


Takes SAM/BAM files and a list of captured regions and writes to separate outputfiles
(1 file per captured region) the captured di-tags (in BAM format).

The capture file file should be a tab-delimited list of positions:
Chromosome     Start     End     Bait_ID

Please only name bait IDs using alphanumeric characters and/or underscores.

The script also attempts to intelligently process bait ids in SeqMonk format and converts to a more
concise id:
e.g. Hcfc1-001|Hcfc1-002|Hcfc1-005 is abbreviated to Hcfc

Each output filename will include the bait ID (unless the --combine option is selected, in which
case the filename will have will be named *.Combined.*).    

COMMAND LINE OPTIONS

--capture           Tab-delimited list of capture (bait) positions and IDs

--columns           The column order for the baits file may be specified using a comma-
                    separated list of integers e.g. --columns 3,5,1,2 indicates that the
                    Chromosome is in column 3; Start in column 5; End in column 1
                    and Bait_ID in column 2. (This is a 1-based numbering system.)
                    Default: 1,2,3,4 (i.e 1:Chromosome; 2:Start; 3:End; 4:Bait_ID)	
					
--combine           Writes all captured di-tags to the same output file, irrespective of the
                    capture region to which the di-tag maps. (Different sample input BAM/SAM 
                    files will still generate separate outputfiles.)
					
--filelist          Name of file listing BAM/SAM files to process

--maximum           Takes an integer of the maximum number of base pairs allowed between a di-tag
                    read pair and filters out reads further away than this distance (as well as
                    trans di-tags) 
					
--minimum           Takes an integer of the minimum number of base pairs allowed between a di-tag
                    read pair and filters out reads closer than this distance (as well as trans 
                    di-tags) 
					
--help              Print help message and exit

--version           Print the program version and exit

Steven Wingett, Babraham Institute, Cambridge, UK (steven.wingett@babraham.ac.uk)
