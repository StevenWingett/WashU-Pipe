#!/usr/bin/perl

###################################################################################
###################################################################################
##This file is Copyright (C) 2015, Steven Wingett (steven.wingett@babraham.ac.uk)##
##                                                                               ##
##This file is part of WashU_Pipe.                                               ##
##                                                                               ##
##WashU_Pipe is free software: you can redistribute it and/or modify             ##
##it under the terms of the GNU General Public License as published by           ##
##the Free Software Foundation, either version 3 of the License, or              ##
##(at your option) any later version.                                            ##
##                                                                               ##
##WashU_Pipe is distributed in the hope that it will be useful,                  ##
##but WITHOUT ANY WARRANTY; without even the implied warranty of                 ##
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                  ##
##GNU General Public License for more details.                                   ##
##                                                                               ##
##You should have received a copy of the GNU General Public License              ##
##along with WashU_Pipe.  If not, see <http://www.gnu.org/licenses/>.            ##
###################################################################################
###################################################################################

use strict;
use warnings;
use POSIX;
use Getopt::Long;
use FindBin '$Bin';
use lib $Bin;
use WashU_Pipe_Module;

use Data::Dumper;


##############################################################
#Get user options and check ok
my $merge;
my $help;
my $version;
my $config_result = GetOptions(
	'help' => \$help,
    "merge=i" => \$merge,
    "version" => \$version
);

die "Could not parse options" unless ($config_result);

if ($help) {
    print while (<DATA>);
    exit(0);
}

if($version){
	$version = get_version();
	print "WashU_Pipe v$version\n";
	exit(0);
}

unless(@ARGV){
	die "Please specify a digest file to process.\n";
}

if(defined $merge){
	die "--merge 0 is not a valid option, please choose an integer greater than 1.\n" if ($merge == 0);
	warn "--merge was set to '1', that will keep the fragment positions unaltered.\n" if ($merge == 1);
	$merge = abs($merge);    #Prevent negative values
}else{
	die "Please specify the number of fragments to --merge.\n";
}

my $digest = $ARGV[0];


#############################################################
#Process digest file
my %digest_frags;    #%{chromosome_name} -> @"start\tend"

if ( $digest =~ /.*\.gz$/ ) {
	open( DIGEST, "zcat $digest |" ) or die "Cannot open digest file '$digest': $!";
} else {
	open( DIGEST, $digest ) or die "Cannot open digest file '$digest': $!";
}
my $outfile = "merged.$merge.$digest";
open(OUT, '>', $outfile) or die "Could not write to '$outfile' : $!";


print OUT scalar <DIGEST>;    #First line
print OUT scalar <DIGEST>;    #Second line

print "Merging fragments in Digest File '$digest'.  Merge size: $merge\n";

my %merged_frag_conversion;
while (<DIGEST>) {
	my $line = $_;
	chomp $line;
	my ($csome, $start, $end) = split(/\t/, $line);		
	
	push( @{ $digest_frags{$csome} }, "$start\t$end");
}

#print Dumper \%digest_frags;

foreach my $csome (keys %digest_frags){
	my $i = 1;
	my $array_size = scalar ( @{ $digest_frags{$csome} } );
	foreach my $frag_borders ( @{ $digest_frags{$csome} } ){
			my ($frag_start, $frag_end) = split (/\t/, $frag_borders);
			
			my $start_array_index = ($merge * (floor( ($i - 1) / $merge) ));
			my $end_array_index = $start_array_index + $merge - 1;
			$end_array_index = ($array_size - 1) if($end_array_index >= $array_size);    #Don't go beyond end of chromosome
			
			my $merged_start = ${ $digest_frags{$csome} }[$start_array_index];
			$merged_start = (split(/\t/, $merged_start))[0];
			my $merged_end = ${ $digest_frags{$csome} }[$end_array_index];
			$merged_end = (split(/\t/, $merged_end))[1];
					
			$merged_frag_conversion{"$csome\t$frag_start\t$frag_end"} = "$csome\t$merged_start\t$merged_end";
			$i++;
	}		
}


#############################################################
#Sort and then print
my %frags_to_print;    #%{csome}->{Start}=end
foreach my $frag (keys %merged_frag_conversion){
	my $merged_frag = "$merged_frag_conversion{$frag}";
	my ($csome, $start, $end) = split(/\t/, $merged_frag);
	$frags_to_print{$csome}->{$start} = $end;
}

#print Dumper \%frags_to_print;


foreach my $csome (sort keys %frags_to_print){

	my @start_positions = keys %{ $frags_to_print{$csome} };
	@start_positions = sort { $a <=> $b } @start_positions;
	
	foreach my $start (@start_positions){
		my $end = $frags_to_print{$csome}->{$start};
		print OUT "$csome\t$start\t$end\n";
	}
}


close OUT or die "Could not close $outfile; : $!";

print "Processing complete\n";

exit (0);


__DATA__

WashU_Merge_Digest_Fragments

SYNOPSIS

To merge contiguous fragments in a HiCUP digest file

FUNCTION

WashU_Merge_Digest_Fragments --merge [Integer] [HiCUP Digest File]
WashU_Merge_Digest_Fragments [Options]

Takes a HiCUP digest file and merges the specified number of contiguous fragments. The HiCUP
Digest header lines will be included in the output file.  The fragments are written to the
output file in the tab-delimited format:

Column1: chromosome name
Column2: fragment start position   
Column3: fragment end position

All input fragments will be represented in the output, even if it is not possibe to merge the
specified required number of fragments. For example, a chromosome that contains 10 fragments, 
processed with a --merge setting of 3, generates 3 merged fragments and 1 solitary fragment. 
In this case the coordinates for the three merged fragments and the individual fragments are 
written to the output file. 

The output filename will be of the form:
merged.merge_number.HiCUP_digest_filename

e.g.
'Digest_Mouse_HindIII.txt' processed with a --merge setting of 3 generates a file named:
'merged.3.Digest_Mouse_HindIII.txt'


COMMAND LINE OPTIONS
					
--help          Print help message and exit

--merge         Merges a specified number of fragments in the --digest file.

--version       Print the program version and exit


Steven Wingett, Babraham Institute, Cambridge, UK (steven.wingett@babraham.ac.uk)

