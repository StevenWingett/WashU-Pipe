#!/usr/bin/perl

###################################################################################
###################################################################################
##This file is Copyright (C) 2015, Steven Wingett (steven.wingett@babraham.ac.uk)##
##                                                                               ##
##                                                                               ##
##This file is part of WashU_Pipe.                                               ##
##                                                                               ##
##WashU_Pipe is free software: you can redistribute it and/or modify             ##
##it under the terms of the GNU General Public License as published by           ##
##the Free Software Foundation, either version 3 of the License, or              ##
##(at your option) any later version.                                            ##
##                                                                               ##
##WashU_Pipe is distributed in the hope that it will be useful,                  ##
##but WITHOUT ANY WARRANTY; without even the implied warranty of                 ##
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                  ##
##GNU General Public License for more details.                                   ##
##                                                                               ##
##You should have received a copy of the GNU General Public License              ##
##along with WashU_Pipe.  If not, see <http://www.gnu.org/licenses/>.            ##
###################################################################################
###################################################################################


###################################################################
#Perl script matches BAM/SAM reads to their restriction fragments
#Places fragments on adjacent lines
###################################################################

use strict;
use warnings;
use Getopt::Long;
use POSIX;
use FindBin '$Bin';
use lib $Bin;
use WashU_Pipe_Module;

use Data::Dumper;

#Option variables
my $digest_file;
my $filelist;
my $version;
my $config_result = GetOptions(
					"digest=s" => \$digest_file,
					"filelist=s" => \$filelist,
					"version" => \$version
			      );

die "Could not parse options.\n" unless ($config_result);

if($version){
	$version = get_version();
	print "WashU_Pipe v$version\n";
	exit(0);
}

my @files;
push(@files, getFilenames($filelist)) if defined $filelist;
push (@files, @ARGV) if @ARGV;
@files = deduplicate_array(@files);
die "Please specify files to process.\n" unless (@files);
print "Determining relevant fragment for each BAM/SAM read\n";

#Read in digest file
my %digest_fragments;

open(DIGEST, '<', $digest_file) or die "Could not open '$digest_file' : $!";

scalar <DIGEST>;    #Ignore header rows
scalar <DIGEST>;    #Ignore header rows

while(<DIGEST>){
	chomp;

      my $chromosome_name = (split/\t/)[0];
      my $first_base = (split/\t/)[1];
      my $last_base = (split/\t/)[2];
      my $ten_kb_region =  ceil($first_base/10_000);
      my $fragment_end_ten_kb_region = ceil($last_base/10_000);
      
	do{
		$digest_fragments{"$chromosome_name\t$ten_kb_region"}{$first_base} = $last_base;
		$ten_kb_region++;
	}while($ten_kb_region <= $fragment_end_ten_kb_region);
}
close DIGEST;
#print Dumper \%digest_fragments;

foreach my $file (@files){

	if($file =~ /\.bam$/){
		open (IN, "samtools view -h $file |") or die "Could not read '$file' : $!";
	}else{
		open(IN, '<', $file) or die "Could not open '$file' : $!";
	}
	
	open(OUT, '>', "$file.rest.frags.txt") or die "Could not write to '$file.rest.frags.txt' : $!";
	
	while(<IN>){
		my $read = $_;

		if( (substr($read, 0, 1) eq '@') ){
			next;
		}
		
		my $csome = (split(/\t/, $read))[2];
		my $pos = (split(/\t/, $read))[3];
		my $seq = (split(/\t/, $read))[9];
		my $strand;

		if(((split(/\t/,$read))[1]) & 0x10){    #Analyse the SAM bitwise flag to determine strand
			$strand = '-';    #Negative strand   
			$pos = $pos + length($seq) - 1;
		}else{
			$strand = '+';    #Positive strand
		}

		my $fragment = &get_rest_frag($csome,$pos,\%digest_fragments);
		my ($frag_csome, $frag_start, $frag_end) = split(/\t/,  $fragment);
		$frag_csome = csome_formatter($frag_csome);

		print OUT "$frag_csome\t$frag_start\t$frag_end\n";
		
	}	
	close IN;
	close OUT;
}

print "Reads positioned on appropriate fragments\n";



exit (0); 


###############################################
#Subroutines
###############################################

#get_rest_frag
#Identifies the restriction fragment where a read is positioned
sub get_rest_frag{

	my ($lookup_csome, $lookup_pos) = @_;
	my $region_10kb = ceil($lookup_pos / 10_000);
	
#	print "$lookup_csome\t$region_10kb\n";
	
	foreach my $frag_start (keys %{$digest_fragments{"$lookup_csome\t$region_10kb"}}){  	#%digest_fragments declared outside of subroutine  

		my $frag_end = $digest_fragments{"$lookup_csome\t$region_10kb"}->{$frag_start};
 
		#Check whether read is on this fragment	
		if(($frag_start <= $lookup_pos) and ($frag_end >= $lookup_pos)){
			return "$lookup_csome\t$frag_start\t$frag_end";
			last;
		}
      }
	  die "Could not locate position in digest:\n$lookup_csome\t$lookup_pos";
}