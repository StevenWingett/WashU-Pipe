#!/usr/bin/perl

use strict;
use warnings;
use POSIX; 
use Getopt::Long;
use FindBin '$Bin';
use lib $Bin;
use WashU_Pipe_Module;

use Data::Dumper;

###################################################################################
###################################################################################
##This file is Copyright (C) 2015, Steven Wingett (steven.wingett@babraham.ac.uk)##
##                                                                               ##
##                                                                               ##
##This file is part of WashU_Pipe.                                               ##
##                                                                               ##
##WashU_Pipe is free software: you can redistribute it and/or modify             ##
##it under the terms of the GNU General Public License as published by           ##
##the Free Software Foundation, either version 3 of the License, or              ##
##(at your option) any later version.                                            ##
##                                                                               ##
##WashU_Pipe is distributed in the hope that it will be useful,                  ##
##but WITHOUT ANY WARRANTY; without even the implied warranty of                 ##
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                  ##
##GNU General Public License for more details.                                   ##
##                                                                               ##
##You should have received a copy of the GNU General Public License              ##
##along with WashU_Pipe.  If not, see <http://www.gnu.org/licenses/>.            ##
###################################################################################
###################################################################################


###############################################################################################
#Perl script to convert a HiCUP output BAM file into
#a format that can be read by the WashU browser
#WashU browser format:
#chr1   \t   111   \t   222   \t   chr2:333-444,55   \t   1   \t   .
#chr2   \t   333   \t   444   \t   chr1:111-222,55   \t   2   \t   .
#
#After running this script
#1) Import ucsc_tools and tabix
#2) bedSort filein fileout
#3) bgzip bedfile
#4) tabix -p bed gedfile.gz
#5)Upload the tbi file and the bedfile.gz to the remote server.  The http link needs to be
#passed to the washU browser.
##############################################################################################

#Option variables
my $bin_size;
my $filelist;
my $version;

my $config_result = GetOptions(
    "bin=i"    => \$bin_size,
	"filelist=s" => \$filelist,
	"version" => \$version
);
die "Could not parse options" unless ($config_result);

if($version){
	$version = get_version();
	print "WashU_Pipe v$version\n";
	exit(0);
}

unless(defined $bin_size){
	$bin_size = 10_000;    #Size of genome browser bins
}

my @files;
push(@files, getFilenames($filelist)) if defined $filelist;
push (@files, @ARGV) if @ARGV;
@files = deduplicate_array(@files);
die "Please specify files to process.\n" unless (@files);

print "Converting from BAM/SAM format to WashU format\n";

foreach my $file (@files){
	if ($file =~ /\.bam$/){
		open (IN,"samtools view -h $file |") or die "Could not open '$file' : $!";
	}else{
		open(IN, '<', $file) or die "Could not open '$file' : $!";
	}	

	#Get chromosome length to determine end point of last bin (else the last bin may extend beyond
	#the end of the chromosome.
	my %csome_lengths;    #${csome} = Number of last bin
	my %interactions;    #Interaction - count
	
	print "Processing $file (make sure SAM headers included in file)\n";
	print "Bin size set to $bin_size\n";
	
	#Read BAM file and write results to output
	while(<IN>){
		chomp;
		my $readF = $_;
	
		if(/^@/){
		my ($header, $csome, $length) = split(/\t/);
  
			if($header eq '@SQ'){
				$csome = substr($csome,3);
				$length = substr($length,3);
				$csome_lengths{$csome} = $length;
			}
			next;
		}

		my $readR = scalar <IN>;
		chomp $readR;
		
		my $chromosomeF = (split(/\t/, $readF))[2];
		my $chromosomeR = (split(/\t/, $readR))[2];
		my $positionF = (split(/\t/, $readF))[3];
		my $positionR = (split(/\t/, $readR))[3];
		my $seqF = (split(/\t/, $readF))[9];
		my $seqR = (split(/\t/, $readR))[9];
		
		my $strandF;
		my $strandR;

		if($chromosomeF ne $chromosomeR){    #Ignore trans di-tags
		    next;
		}

		if(((split(/\t/,$readF))[1]) & 0x10){    #Analyse the SAM bitwise flag to determine strand
			$strandF = '-';    #Negative strand   
			$positionF = $positionF + length($seqF) - 1;
		}else{
			$strandF = '+';    #Positive strand
		}

		if(((split(/\t/,$readR))[1]) & 0x10){    #Analyse the SAM bitwise flag to determine strand
			$strandR = '-';    #Negative strand
			$positionR = $positionR + length($seqR) - 1;
		}else{
			$strandR = '+';    #Positive strand
		}
		
		$positionF = ceil( ($positionF / $bin_size) );
		$positionR = ceil( ($positionR / $bin_size) );

		my $startF = ($positionF * $bin_size) - ($bin_size - 1);
		my $endF = ($positionF * $bin_size);
		my $startR = ($positionR * $bin_size) - ($bin_size - 1);
		my $endR = ($positionR * $bin_size);
	
		#If allocated bin runs over the end of the chromosome, change the position of the
		#last base to the end of the chromosome.
		if($endF > $csome_lengths{$chromosomeF} ){
			$endF = $csome_lengths{$chromosomeF};
		}
		
		if($endR > $csome_lengths{$chromosomeR} ){
			$endR = $csome_lengths{$chromosomeR};
		}	
		
		#Which read of the read pair is sequenced first is random (i.e. expected to be 50:50), 
		#and is not of biological significance, so store in the interactions hash accordingly
		my $labelF = "$chromosomeF\t$startF\t$endF";
		my $labelR = "$chromosomeR\t$startR\t$endR";
	
		if(($labelF cmp $labelR) == 1){
			$interactions{"$labelR\t$labelF"}++;
		}else{
			$interactions{"$labelF\t$labelR"}++;
		}	
	}	
	close IN;

	open(OUT, '>', "$file.washu_format.txt") or die "Could not open '$file.washu_format.txt' : $!";
	my $i = 1;
	foreach my $interaction (keys %interactions){
		my ($csomeF, $startF, $endF, $csomeR, $startR, $endR) = split(/\t/, $interaction);
		my $count = $interactions{$interaction};
		
		$csomeF = csome_formatter($csomeF);
		$csomeR = csome_formatter($csomeR);
		
		print OUT "$csomeF\t$startF\t$endF\t".$csomeR.':'.$startR.'-'.$endR.','."$count\t$i\t.\n";
		$i++;
		print OUT "$csomeR\t$startR\t$endR\t".$csomeF.':'.$startF.'-'.$endF.','."$count\t$i\t.\n";
		$i++;
	}

	close OUT;

}

print "Conversion complete\n";






