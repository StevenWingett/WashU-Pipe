#!/usr/bin/perl

use strict;
use warnings;
use POSIX;
use Getopt::Long;
use FindBin '$Bin';
use lib $Bin;
use WashU_Pipe_Module;

use Data::Dumper;

###################################################################################
###################################################################################
##This file is Copyright (C) 2015, Steven Wingett (steven.wingett@babraham.ac.uk)##
##                                                                               ##
##                                                                               ##
##This file is part of WashU_Pipe.                                               ##
##                                                                               ##
##WashU_Pipe is free software: you can redistribute it and/or modify             ##
##it under the terms of the GNU General Public License as published by           ##
##the Free Software Foundation, either version 3 of the License, or              ##
##(at your option) any later version.                                            ##
##                                                                               ##
##WashU_Pipe is distributed in the hope that it will be useful,                  ##
##but WITHOUT ANY WARRANTY; without even the implied warranty of                 ##
##MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                  ##
##GNU General Public License for more details.                                   ##
##                                                                               ##
##You should have received a copy of the GNU General Public License              ##
##along with WashU_Pipe.  If not, see <http://www.gnu.org/licenses/>.            ##
###################################################################################
###################################################################################



#############################################################################################
#Perl script to convert from WashU format:
#chr1   \t   111   \t   222   \t   chr2:333-444,55   \t   1   \t   .
#chr2   \t   333   \t   444   \t   chr1:111-222,55   \t   2   \t   .
#
#to
#
#Fragment format
#ChromsomeA	\t StartA \t EndA \t Score
#ChromsomeB \t StartB \t EndB \t Score
#(Where A interacts with B. A and B need to be on adjacent lines).
#This script is useful if the user requires 4C other ends from a WashU format file
#(since the pipeline processes fragment files).
############################################################################################

my $version;
my $filelist;

my $config_result = GetOptions(
		"filelist=s" => \$filelist,
		"version" => \$version
);
die "Could not parse options.\n" unless ($config_result);

if($version){
	$version = get_version();
	print "WashU_Pipe v$version\n";
	exit(0);
}

my @files;
push(@files, getFilenames($filelist)) if defined $filelist;
push (@files, @ARGV) if @ARGV;
@files = deduplicate_array(@files);
die "Please specify files to process.\n" unless (@files);
print "Converting fragments data from WashU format to fragment format\n";


foreach my $file (@files){

	if($file =~ /\.gz$/){
		open (IN, "zcat $file |") or die "Could not read file '$file' : $!";
	}else{
		open (IN, '<', $file) or die "Could not read file '$file' : $!";
	}

	print "Processing $file\n";
	
	my %unique_interactions;    #Hash that stores unique interactions (May need to develop this code
	#so memory issues not a problem for larger files.)
	
	while(<IN>){
		my $line = $_;
		chomp $line;
		my ($csomeA, $startA, $endA, $dataB) = split(/\t/, $line);
		my ($csomeB, $startB, $endB, $score) = split(/[\:\-\,]/, $dataB);
				
		#WashU format reports each interaction twice, so remove unique values
		my $labelA = "$csomeA\t$startA\t$endA";
		my $labelB = "$csomeB\t$startB\t$endB";
		
		
		if ( ($labelA cmp $labelB) == 1 ){
			$unique_interactions{"$labelB\t$labelA"} = $score;
		}else{
			$unique_interactions{"$labelA\t$labelB"} = $score;
		}
	}
	
	close IN or die "Could not close '$file' : $!";
	
	open(OUT, '>', "$file.fragments.txt") or die "Could not open '$file.fragments.txt' : $!";
	foreach my $interaction (sort keys %unique_interactions){
		my ($csomeA, $startA, $endA, $csomeB, $startB, $endB) = split (/\t/, $interaction);
		my $score = $unique_interactions{$interaction};

		$csomeA = csome_formatter($csomeA);
		$csomeB = csome_formatter($csomeB);

		print OUT "$csomeA\t$startA\t$endA\t$score\n";
		print OUT "$csomeB\t$startB\t$endB\t$score\n";
	}
	
	close OUT or die "Could not close '$file.fragments.txt' : $!";
	
}

print "Conversion to fragment format complete\n";

exit (0);